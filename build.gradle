import com.bmuschko.gradle.docker.tasks.image.*

plugins {
    id 'com.bmuschko.docker-remote-api' version '5.2.0' apply false
    id 'com.gorylenko.gradle-git-properties' version '1.5.1' apply false
    id "org.sonarqube" version "2.7.1" apply false
}

group = 'io.github.gurv'
version = '0.2.0-SNAPSHOT'

apply plugin: 'org.sonarqube'

ext {
    dockerVersion = '18.03.1-ce'
    portainerVersion = '1.22.0'

    email = 'vladimir.gurinovich@gmail.com'
    
    dockerhubRegistry = 'docker.io/gurv'
    githubRegistry = 'docker.pkg.github.com/gurv/vg-ops'
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "gurv-github"
        property "sonar.projectVersion", "${project.version}"
        property "sonar.sources", "."
        property "sonar.links.ci", "https://travis-ci.org/gurv/vg-ops"
        property "sonar.links.scm", "https://github.com/gurv/vg-ops"
        property "sonar.links.issue", "https://github.com/gurv/vg-ops/issues"
    }
}

subprojects {
    apply plugin: 'base'
    apply plugin: 'com.bmuschko.docker-remote-api'

    ext {
        imageName = "vg-${project.name}"
        imageVersion = "latest"
    }

    docker {
        registryCredentials {
            email = 'vladimir.gurinovich@gmail.com'
        }
    }

    task buildImage(type: DockerBuildImage) {
        dockerFile = file('docker/Dockerfile')
        inputDir = project.projectDir
        tags.add("${project.imageName}:${project.imageVersion}")
    }

    task tagImageDockerHub(type: DockerTagImage) {
        dependsOn buildImage
        imageId = project.imageName
        repository = "${rootProject.dockerhubRegistry}/${project.imageName}"
        tag = project.imageVersion
    }
    
    task pushImageToDockerHub(type: DockerPushImage) {
        dependsOn tagImageDockerHub
        imageName = "${rootProject.dockerhubRegistry}/${project.imageName}"
        tag = project.imageVersion
        doFirst {
            registryCredentials.url = rootProject.dockerhubRegistry
            registryCredentials.username = findProperty('dockerhubUsername') ?: System.getenv('CI_DOCKER_USERNAME')
            registryCredentials.password = findProperty('dockerhubPassword') ?: System.getenv('CI_DOCKER_PASSWORD')
        }
    }

    task tagImageGitHub(type: DockerTagImage) {
        dependsOn buildImage
        imageId = project.imageName
        repository = "${rootProject.githubRegistry}/${project.imageName}"
        tag = project.imageVersion
    }

    task pushImageToGitHub(type: DockerPushImage) {
        dependsOn tagImageGitHub
        imageName = "${rootProject.githubRegistry}/${project.imageName}"
        tag = project.imageVersion
        doFirst {
            registryCredentials.url = rootProject.githubRegistry
            registryCredentials.username = findProperty('githubUsername') ?: System.getenv('GITHUB_USERNAME')
            registryCredentials.password = findProperty('githubToken') ?: System.getenv('GITHUB_TOKEN')
        }
    }
}